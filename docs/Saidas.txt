Tela: Saidas
============

Objetivo
--------
- Registrar entregas de EPIs a colaboradores e acompanhar status de devolucao/troca.
- Garantir controle de estoque usando os mesmos dados do modo remoto ou local.

Campos do formulario
--------------------
- `pessoaId` (select): preenchido com `dataClient.pessoas.list`.
- `materialId` (select): preenchido com `dataClient.materiais.list`.
- `quantidade` (numeric >= 1).
- `centroCusto` (texto, obrigatorio): identifica o centro que receberá o custo da saída.
- `centroServico` (texto, obrigatorio): centro de serviço responsável pelo colaborador.
- `dataEntrega` (date opcional).
- `status` (select na tabela; valores dinamicos).

Validacoes
----------
- HTML assegura campos obrigatorios e quantidade positiva.
- Servico remoto verifica:
  - Pessoa e material existentes em Supabase.
  - Disponibilidade de estoque (`calcularSaldoMaterialAtual`).
  - Centros de custo e serviço preenchidos.
  - Calcula `dataTroca` com base na validade do material.
- Servico local aplica a mesma logica antes de persistir no `localStorage`.

APIs
----
- `dataClient.saidas.list()`
- `dataClient.saidas.create(payload)`
- Em modo remoto mapeia para `/api/saidas`.

Fluxo de dados
--------------
1. Depois de registrar uma saida, pagina recarrega pessoas, materiais e saidas em paralelo.
2. Tabela mostra pessoa, material, quantidade, status, datas e valor total (calculado no cliente).
3. Filtros por termo, pessoa, material, status, periodo.

Regra de estoque
----------------
- Quantidade maxima permitida e o saldo atual do material.
- Operacao retorna `estoqueAtual` apos o registro (utilizado em mensagens de feedback no futuro).

Dependencias
------------
- `AuthContext` para `usuarioResponsavel`.
- `dataClient` para alternar backend.
- `SaidasRules` e `MateriaisRules` para reutilizar validacoes.
- Seeds locais incluem duas saidas de exemplo.
