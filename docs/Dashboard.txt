Tela: Dashboard
===============

Objetivo
--------
- Exibir uma visao geral das entradas, saidas e alertas de estoque.
- Oferecer acompanhamento rapido para acao, independente do modo de dados (Supabase ou local).

Filtros
-------
- `periodoInicio` / `periodoFim` (`type="month"`): enviados para `dataClient.estoque.dashboard`.
- `termo`: filtragem no cliente sobre os arrays retornados (materiais e rankings).

APIs e fontes de dados
----------------------
- **Modo remoto**: `GET /api/estoque/dashboard` protegido por token Supabase. Calcula no backend utilizando `EstoqueOperations.dashboard`.
- **Modo local**: `localApi.estoque.dashboard` usa os dados do `localStorage` e os auxiliares de `src/lib/estoque.js`.
- Em ambos os casos a resposta contem `{ periodo, entradas, saidas, entradasDetalhadas[], saidasDetalhadas[], entradasHistoricas[], saidasHistoricas[], materiaisMaisMovimentados[], estoqueAtual }`.

Fluxo de dados
--------------
1. Componentes enviam filtros atuais.
2. `dataClient` seleciona a implementacao (remota ou local).
3. Resposta alimenta:
   - `EntradasSaidasChart` e `ValorMovimentadoChart`.
   - `estoqueAtual.alertas` (cards).
   - `estoqueAtual.itens` (listas).
   - `materiaisMaisMovimentados` (ranking).
4. Caso sem dados, exibimos mensagens neutras no lugar de graficos.

Regras e consistencia
---------------------
- O backend ou `localApi` recalculam estoque e valores usando `montarDashboard`.
- Campos monetarios sao arredondados no backend/servico para evitar divergencia entre modos.
- Filtro `termo` nunca faz chamada extra; apenas reduz arrays em memoria.

Comportamento de UI
-------------------
- `isLoading` alterna estados dos botoes.
- Erros exibem texto retornado (`error.message`).
- Cards e graficos mudam dinamicamente conforme filtros.

Dependencias
------------
- Sessao valida do `AuthContext`.
- Componentes de grafico em `src/components/charts`.
- `dataClient` (modo remoto) depende do token Supabase; no modo local depende da chave `api-estoque-local-data-v1`.

Persistencia
------------
- **Modo remoto**: consulta tabelas Supabase `materiais`, `entradas`, `saidas`, `pessoas`.
- **Modo local**: leitura do snapshot salvo em `localStorage`, com seeds iniciais em `src/data/local-seed.json`.
