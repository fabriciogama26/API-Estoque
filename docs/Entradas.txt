Tela: Entradas
==============

Objetivo
--------
- Registrar reabastecimentos de EPIs e exibir historico com valores totais.
- Compartilha a mesma interface para modo remoto (Supabase) e modo local.

Campos do formulario
--------------------
- `materialId` (select, obrigatorio): lista populada via `dataClient.materiais.list`.
- `quantidade` (numeric, minimo 1).
- `centroCusto` (texto, obrigatorio): define o centro contábil responsável pelo custo da entrada.
- `centroServico` (texto, obrigatorio): identifica o centro de serviço que receberá o material.
- `dataEntrada` (date, opcional). Quando ausente, o backend/servico grava `now()` em ISO.

Validacoes
----------
- HTML garante campos obrigatorios (material, quantidade, centro de custo e centro de serviço) e quantidade positiva.
- Servico remoto (`EntradasOperations.create`) confirma existencia do material no Supabase e rejeita centros vazios.
- Servico local replica as mesmas regras e armazena no `localStorage`.

APIs
----
- Listagem de materiais: `dataClient.materiais.list()`.
- Historico: `dataClient.entradas.list()`.
- Registro: `dataClient.entradas.create(payload)`.
  - Modo remoto envia `POST /api/entradas` com token Supabase.
  - Modo local grava direto no armazenamento em cache.

Fluxo de dados
--------------
1. Ao enviar o formulario, `EntradasPage` monta o payload e chama `dataClient.entradas.create`.
2. Em sucesso, limpa formulario, recarrega materiais e entradas.
3. Tabela mostra nome do material, quantidade, valor total (calculado no cliente) e responsavel.
4. Filtros locais permitem buscas sem chamadas adicionais.

Regras de negocio
-----------------
- Nenhum saldo e calculado aqui; outros endpoints usam os dados agregados.
- Campo `usuarioResponsavel` vem do `AuthContext` (nome ou username).
- Modo local honra seeds e gera IDs com `crypto.randomUUID`.

Dependencias
------------
- `AuthContext` para obter usuario logado.
- `dataClient` para encaminhar chamadas ao backend apropriado.
- Seeds locais (`src/data/local-seed.json`) garantem dados iniciais quando em modo local.
