Tela: Entradas
================

Objetivo
-------
- Registrar reabastecimentos de estoque (entradas EPI) e listar o histórico completo com os totais calculados.
- Toda a persistência é gerenciada pelo endpoint serverless suportado pelo Supabase.

Campos do Formulário
-----------
- `materialId` (select, obrigatório): preenchido via `GET /api/materiais`.
- `quantidade` (número >= 1, obrigatório).
- `dataEntrada` (data, opcional). Quando omitido, o backend armazena `now()` em ISO.

Validações
-----------
- O frontend aplica campos obrigatórios e quantidade positiva via atributos HTML.
- O manipulador serverless valida:
* Existência de material no Supabase (tabela `materiais`).
* Quantidade numérica e > 0.
* Data opcional, analisada em um carimbo de data/hora ISO válido.

APIs
----
- `GET /api/materiais`
- `GET /api/entradas`
- `POST /api/entradas` (espera token Bearer do Supabase). Payload:
```json
{
"materialId": "uuid",
"quantidade": 5,
"dataEntrada": "2025-10-06T12:00:00.000Z",
"usuarioResponsavel": "Laura Silva"
}
```

Fluxo de Dados
---------
- Após um POST bem-sucedido, a interface do usuário redefine o formulário e recarrega os materiais e as entradas para manter a sincronização.
- As linhas da tabela incluem campos derivados (detalhes do material, valor total) calculados no lado do cliente usando a lista de materiais em cache.

Regras de Negócios
--------------
- O backend grava na tabela `entradas` do Supabase e registra o usuário autenticado.
- Nenhum saldo de estoque é computado aqui; os endpoints do painel e do estoque consomem os dados acumulados.

Comportamento da IU
------------
- O botão Enviar exibe `Registrando...` ​​enquanto aguarda a resposta.
- Erros da API são exibidos dentro do formulário por meio do estado `error`.
- Filtros permitem buscas do lado do cliente sem chamadas HTTP extras.

Dependências
------------
- Requer sessão autenticada para que `src/services/api.js` possa anexar o token Supabase.
- Depende dos dados `Materiais` para preencher a seleção e exibir nomes amigáveis.