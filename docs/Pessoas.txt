Tela: Pessoas
=============

Objetivo
--------
- Gerenciar colaboradores (cadastro, edicao, historico de alteracoes).
- Facilitar integracao com saidas de EPIs e registros de acidentes.

Fluxo
-----
1. Formulario cria/edita pessoas via `dataClient.pessoas`.
2. Filtros (termo, local, cargo) atuam somente no cliente.
3. Modal de historico (`PessoasHistoryModal`) exibe alteracoes registradas.

Campos principais
-----------------
- `nome`, `matricula`, `local`, `cargo`, `tipoExecucao` (obrigatorio).
- `dataAdmissao` (opcional) aceita data ISO ou `yyyy-mm-dd`.
- Historico guarda `dataEdicao`, `usuarioResponsavel`, campos alterados.

APIs
----
- `dataClient.pessoas.list()`
- `dataClient.pessoas.create(payload)`
- `dataClient.pessoas.update(id, payload)`
- `dataClient.pessoas.history(id)`
  - Remoto: endpoints `/api/pessoas` e `/api/pessoas/history/:id`.
  - Local: leitura/escrita no `localStorage`, garantindo unicidade de matricula.

Validacoes
----------
- Formulario aplica `required` basico.
- Servicos confirmam:
  - Todos os campos obrigatorios nao vazios (`nome`, `matricula`, `centroServico`, `cargo`, `tipoExecucao`).
  - Matricula unica (case insensitive).
  - `dataAdmissao`, quando informada, precisa representar uma data valida.

Comportamento de UI
-------------------
- `isSaving` controla estado dos botoes.
- Historico carrega do cache quando possivel.
- Erros exibidos no topo do formulario e no modal.
- Tabela apresenta `dataAdmissao` formatada (dd/mm/aaaa) e `tipoExecucao`.

Dependencias
------------
- `AuthContext` para registrar usuario responsavel nas alteracoes.
- `PessoasRules` para sanitizar payload.
- `dataClient` garante a compatibilidade entre modo remoto e local.
- Seeds locais incluem dois colaboradores para testes iniciais.
