Guia de Configuracao e Validacao de RLS
========================================

Contexto
-------
Funcoes serverless em `api/` usam a chave de funcao de servico do Supabase para executar a logica de negocios. As politicas de Seguranca em Nivel de Linha (RLS) devem, portanto, garantir que os usuarios finais, autenticados com o Supabase Auth, possam acessar apenas as linhas permitidas enquanto a funcao de servico continua operando para a logica de back-end.

Permissoes Recomendadas
-----------------------
1. `pessoas`
- `SELECT`: permitir usuarios autenticados.
- `INSERT` / `UPDATE`: restringir a funcoes administrativas (por exemplo, declarar `is_admin` ou ser membro de uma tabela de permissoes dedicada).
2. `materiais`
- `SELECT`: usuarios autenticados.
- `INSERT` / `UPDATE`: forneca politicas que verifiquem reivindicacoes ou associacao (`usuarios_permissoes`) antes de permitir gravacoes.
3. `material_price_history`
- `INSERT`: geralmente deve ser permitido apenas para a funcao de servico. Adicione uma politica que verifique `current_setting('request.jwt.claim.role', true) = 'service_role'`.
- `SELECT`: usuarios autenticados podem ler para auditoria.
4. `entradas` e `saidas`
- `SELECT`: usuarios autenticados.
- `INSERT`: limite para operadores responsaveis pelo estoque (por exemplo, associacao em `operadores_estoque`).
- Sempre registre `usuarioResponsavel` usando o e-mail autenticado para rastreabilidade.
5. `acidentes`
- `SELECT` / `INSERT`: pessoal de seguranca autenticado.
- `UPDATE`: restrinja ao registrante original ou funcoes de seguranca explicitas.

Criando Politicas
-----------------
1. Habilite o RLS:
```sql
alter table pessoas enable row level security;
```
2. Politica de leitura simples:
```sql
create policy "authenticated read" on pessoas
for select using (auth.role() = 'authenticated');
```
3. Politica de gravacao condicional usando declaracoes personalizadas:
```sql
create policy "admins update pessoas" on pessoas
for update using (
auth.role() = 'authenticated'
and coalesce((auth.jwt()->>'is_admin')::bool, false)
);
```
4. Politica baseada em associacao:
```sql
criar politica "operadores estoque" em entradas
para todos usando (
auth.role() = 'authenticated'
e exists (
selecione 1 de operadores_estoque oe
onde oe.user_id = auth.uid()
)
);
```

Validacao Continua
---------------------
- **Testes automatizados**
- Use o Supabase CLI ou `pgTAP` para simular consultas com diferentes JWTs.
- Adicione verificacoes de CI que tentem `SELECT/INSERT/UPDATE` com usuarios sem permissoes e garanta que falhem.
- **Testes manuais**
- Gere tokens de acesso via `supabase.auth.signInWithPassword` para cada funcao e chame os endpoints `/api/*`.
- Confirme se chamadas nao autorizadas retornam respostas 401/403.
- **Auditorias**
- Listar politicas ativas: `select * from pg_policies where schemaname = 'public';`
- Garantir que as novas tabelas tenham o RLS habilitado antes da implantacao em producao.
- Registrar as alteracoes nesta pasta para referencia futura.

Integracao com Rotas Serverless
----------------------------------
- Todas as funcoes usam `requireAuth` para validar o token do portador. Garantir que:
- Os tokens emitidos pelo usuario nunca incluam o `service_role`.
- A chave da funcao de servico permaneca apenas no lado do servidor.
- Para operacoes criticas (ajustes de estoque, atualizacoes de acidentes), verifique se as regras de negocios ainda sao executadas com o RLS habilitado. Se necessario, adicione politicas explicitas concedendo acesso a funcao de servico (por exemplo, `FORCE ROW LEVEL SECURITY` mais uma politica de servico).

Lista de Verificacao de Implantacao
--------------------
1. Aplicar ou atualizar politicas para cada tabela acessada pelo aplicativo.
2. Execute testes de permissao automatizados e manuais para `pessoas`, `materiais`, `entradas`, `saidas`, `estoque` e `acidentes`.
3. Documente os resultados e atualizacoes em `docs/`.
4. Revise as politicas sempre que novas rotas ou tabelas forem introduzidas.

Referencias
----------
- Guia RLS do Supabase: https://supabase.com/docs/guides/auth/row-level-security
- Declaracoes personalizadas: https://supabase.com/docs/guides/auth/custom-claims
- Testes da CLI do Supabase: https://supabase.com/docs/guides/cli/local-testing