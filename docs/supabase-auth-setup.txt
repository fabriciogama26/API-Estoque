Guia de Autenticacao Supabase
=============================

Visao Geral
-----------
- O frontend usa o Supabase Auth (SDK oficial) para login e guarda o token `access_token`.
- As funcoes serverless (`api/`) validam cada requisicao com `supabaseAdmin.auth.getUser(token)` usando a `service_role`.
- A tabela `public.app_users` (criada em `supabase/migrations/0001_create_schema.sql`) permite mapear perfis autenticados a metadados internos quando necessario.
- As migrations **nao** configuram provedores de login, politicas de confirmacao ou templates de email; esses passos sao manuais no painel Supabase.

Passo a Passo de Configuracao
-----------------------------
1. Projeto Supabase
   - Crie um projeto em https://app.supabase.com (ou use um existente) e anote o `project-ref`.
   - No menu *Authentication > Settings* configure:
     * Provedores desejados (Email/Password, OAuth, SSO etc.).
     * Requisito de confirmacao de email se aplicavel.
     * URLs de redirecionamento (por exemplo `http://localhost:5173` para desenvolvimento e o dominio de producao).
2. Chaves e Variaveis
   - Copie `SUPABASE_URL`, `SUPABASE_ANON_KEY` e `SUPABASE_SERVICE_ROLE_KEY` em:
     * `.env.local` (frontend): `VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY`.
     * `.env` ou configuracao da Vercel (API): `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`.
   - Nunca exponha a `service_role` no frontend.
3. Aplicar Schema e Politicas
   - `npx supabase link --project-ref <project-ref>` dentro de `supabase/`.
   - `npx supabase db push` aplica as migrations `0001`â€“`0005`, criando `app_users`, `pessoas`, `materiais`, `entradas`, `saidas`, `material_price_history`, `acidentes` e ativando RLS conforme `0002_enable_rls.sql`.
   - Se voce ja tinha tabelas com outro nome/estrutura, gere uma migration de ajuste (`npx supabase migration new ajustar_schema`) antes de aplicar.
4. RLS e Perfis
   - As migrations habilitam RLS e liberam:
     * `select` para roles `authenticated`/`service_role`.
     * Mutacoes apenas para `service_role`.
   - Para restringir por usuario/empresa, adicione policies extras seguindo `docs/rls-policies-guide.txt`.
5. Usuarios de Teste
   - Crie contas de teste no dashboard (Authentication > Users) ou via CLI `npx supabase auth signups start` se quiser automatizar.
   - Se precisar vincular um usuario a `app_users`, insira linha na tabela com `auth_user_id` igual ao `user.id` retornado pelo Supabase.
6. Desenvolvimento Local
   - `npx supabase db reset` roda migrations em um Postgres local via Docker (requer `supabase start`).
   - Use `supabase env pull`/`env push` se quiser sincronizar variaveis com o projeto.

Observacoes Importantes
-----------------------
- O token `access_token` precisa ser enviado em `Authorization: Bearer` em todas as chamadas a `/api/*`.
- A camada serverless assume que o usuario possui `user_metadata.nome` ou similares para compor `usuarioResponsavel`; configure os providers para capturar esses campos ou ajuste o codigo.
- A migrations **nao** criam funcoes, triggers ou rotinas para provisionar usuarios automaticamente; qualquer sincronizacao adicional com sistemas externos deve ser codificada separadamente.
- Depois de alterar politicas ou provedores, valide os fluxos de login/logout no frontend e rode `npx supabase db status` para garantir que nao ha migrations pendentes.
