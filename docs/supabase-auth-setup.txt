Guia de Autenticacao Supabase
=============================

Visao Geral
-----------
- O frontend usa o Supabase Auth (SDK oficial) para login e guarda o token `access_token`.
- As chamadas de dados são feitas diretamente com `@supabase/supabase-js` (sem backend intermediário).
- A tabela `public.app_users` (criada em `supabase/migrations/0001_create_schema.sql`) pode mapear perfis autenticados a metadados internos caso exista alguma camada serverless opcional.
- As migrations **nao** configuram provedores de login, politicas de confirmacao ou templates de email; esses passos sao manuais no painel Supabase.

Passo a Passo de Configuracao
-----------------------------
1. Projeto Supabase
   - Crie um projeto em https://app.supabase.com (ou use um existente) e anote o `project-ref`.
   - No menu *Authentication > Settings* configure:
     * Provedores desejados (Email/Password, OAuth, SSO etc.).
     * Requisito de confirmacao de email se aplicavel.
     * URLs de redirecionamento (por exemplo `http://localhost:5173` para desenvolvimento e o dominio de producao).
2. Chaves e Variaveis
   - Defina `VITE_SUPABASE_URL` e `VITE_SUPABASE_ANON_KEY` no `.env.local` e no ambiente de deploy.
   - A `service_role` permanece reservada para funcoes backend opcionais (nao e utilizada pelo frontend direto).
3. Aplicar Schema e Politicas
   - `npx supabase link --project-ref <project-ref>` dentro de `supabase/`.
   - `npx supabase db push` aplica as migrations `0001`–`0005`, criando `app_users`, `pessoas`, `materiais`, `entradas`, `saidas`, `material_price_history`, `acidentes` e ativando RLS conforme `0002_enable_rls.sql`.
   - Se voce ja tinha tabelas com outro nome/estrutura, gere uma migration de ajuste (`npx supabase migration new ajustar_schema`) antes de aplicar.
4. RLS e Perfis
   - As migrations habilitam RLS e liberam:
     * `select` para roles `authenticated`/`service_role`.
     * Mutacoes apenas para `service_role`.
   - Para restringir por usuario/empresa, adicione policies extras seguindo `docs/rls-policies-guide.txt`.
5. Usuarios de Teste
   - Crie contas de teste no dashboard (Authentication > Users) ou via CLI `npx supabase auth signups start` se quiser automatizar.
   - Se precisar vincular um usuario a `app_users`, insira linha na tabela com `auth_user_id` igual ao `user.id` retornado pelo Supabase.
6. Desenvolvimento Local
   - `npx supabase db reset` roda migrations em um Postgres local via Docker (requer `supabase start`).
   - Use `supabase env pull`/`env push` se quiser sincronizar variaveis com o projeto.
7. Recuperacao de Senha
   - Em *Authentication > Templates* ative e personalize o email "Reset password".
   - Configure o remetente e as URLs permitidas em *Authentication > Settings > Email* para que o link seja enviado.
   - Opcionalmente defina `VITE_SUPABASE_PASSWORD_REDIRECT` com a pagina que recebera o fluxo de redefinicao.

Observacoes Importantes
-----------------------
- O token `access_token` precisa ser enviado em `Authorization: Bearer` em todas as chamadas a `/api/*`.
- A camada serverless assume que o usuario possui `user_metadata.nome` ou similares para compor `usuarioResponsavel`; configure os providers para capturar esses campos ou ajuste o codigo.
- A migrations **nao** criam funcoes, triggers ou rotinas para provisionar usuarios automaticamente; qualquer sincronizacao adicional com sistemas externos deve ser codificada separadamente.
- Depois de alterar politicas ou provedores, valide os fluxos de login/logout no frontend e rode `npx supabase db status` para garantir que nao ha migrations pendentes.


